############
# Preamble #
############
- Class: meta
  Course: qss-swirl
  Lesson: DISCOVERY2
  Author: Winston Chou, Kosuke Imai
  Type: Standard
  Organization: Princeton University
  Version: 1.0.0

## Conceptual Questions
- Class: text
  Output: >
    These exercises are a companion to Chapter 5 of
    'Quantitative Social Science'. When you see ..., press Enter.

- Class: text
  Output: >
    Chapter 5 also introduces tools for analyzing network data,
    which describe the relationships between units.

# Question 1
- Class: mult_question
  Output: 'What are some examples of networks?'
  AnswerChoices: >
    marriages between families;international trade flows;
    friendships on Facebook; all of these
  CorrectAnswer: all of these
  AnswerTests: omnitest(correctVal = "all of these")
  Hint: See ''Network Data''.

# Question 2
- Class: mult_question
  Output: 'A node represents __________'
  AnswerChoices: 'an individual unit; a group of units; all the units'
  CorrectAnswer: an individual unit
  AnswerTests: omnitest(correctVal = 'an individual unit')
  Hint: See 'Undirected Graphs and Centrality Measures'.

# Question 3
- Class: mult_question
  Output: 'An edge represents the __________'
  AnswerChoices: >
    existence of a relationship between any pair of nodes;
    lack of a relationship between any pair of nodes; nodes that are the same
  CorrectAnswer: existence of a relationship between any pair of nodes
  AnswerTests: >-
    omnitest(
      correctVal = 'existence of a relationship between any pair of nodes'
    )
  Hint: See 'Undirected Graphs and Centrality Measures'.

## Programming Questions
- Class: text
  Output: >
    Network data often take the form of an adjacency matrix.
    Adjacency matrices have the same number of rows and columns,
    and each row (column) corresponds to a unit.
    Each cell describes the relationship between a pair of units,
    and each diagonal cell describes the relationship of a unit with itself.

- Class: text
  Output: >
    Let's explore the adjacency matrix "florence" described in Chapter 5.
    "florence" has already been loaded for you.

# Question 4
- Class: cmd_question
  Output: >
    Verify that "florence" is a square adjacency matrix using the dim()
    function.
  CorrectAnswer: dim(florence)
  AnswerTests: omnitest(correctExpr = "dim(florence)")

# Question 5
- Class: cmd_question
  Output: >
    Now, use indexing to have R output the adjacency (sub)matrix
    for the first 5 families only.
  CorrectAnswer: florence[1:5, 1:5]
  AnswerTests: >
    any_of_exprs(
      "florence[1:5, 1:5]",
      "florence[1:5, seq(5)]",
      "florence[seq(5), 1:5]",
      "florence[seq(5), seq(5)]"
    )
  Hint: See ''Marriage Network in Renaissance Florence''.

# Question 6
- Class: mult_question
  Output: 'Is "florence" an example of directed or undirected network data?'
  AnswerChoices: >
    florence is undirected; florence is directed; we cannot tell yet
  CorrectAnswer: florence is undirected
  AnswerTests: omnitest(correctVal = 'florence is undirected')
  Hint: See 'Marriage Network in Renaissance Florence'.

- Class: text
  Output: >
    Let's try visualizing "florence" using a graph.
    We've already installed the igraph package for you to use.

# Question 7
- Class: cmd_question
  Output: >
    There are two steps to plotting the network graph of "florence".
    First, use graph.adjacency() function to produce an "igraph" object called
    "florence.graph". Be sure to specify that the adjancency matrix is
    undirected and that there are no marriages within families.
  CorrectAnswer: >-
    florence.graph <-
      graph.adjacency(florence, mode = "undirected", diag = FALSE)
  AnswerTests: >-
    omnitest(
      correctExpr =
        'florence.graph <- graph.adjacency(florence, mode = "undirected", diag = FALSE)'
    )
  Hint: See 'Marriage Network in Renaissance Florence'.

- Class: cmd_question
  Output: >
    Now use the "plot()" function to visualize the marriage network
    described by "florence.graph".
  CorrectAnswer: plot(florence.graph)
  AnswerTests: omnitest(correctExpr = 'plot(florence.graph)')
  Hint: See 'Marriage Network in Renaissance Florence'.

# Question 8
- Class: mult_question
  Output: >
    We can quantify each family's place in the network using a measure of
    centrality. One common measure of centrality is known as 'betweenness'.
    Which of these statements best describes betweenness?
  AnswerChoices: >
    betweenness is the proportion of shortest paths between two other nodes
    that contain it; A node's betweenness is the number of nodes that are
    immediately connected to it; A node's betweenness is a measure of how
    close it is to other nodes; None of these'
  CorrectAnswer: >
    betweenness is the proportion of shortest paths between
    two other nodes that contain it
  AnswerTests: >-
    omnitest(
      correctVal =
        'betweenness is the proportion of shortest paths between two other nodes that contain it'
    )
  Hint: See 'Undirected Graphs and Centrality Measures'.

# Question 9
- Class: cmd_question
  Output: >
    Compute the betweenness of each node in "florence"
    and store the result as an object called "between".
  CorrectAnswer: between <- betweenness(florence.graph)
  AnswerTests: omnitest(correctExpr = 'between <- betweenness(florence.graph)')
  Hint: See ''Undirected Graphs and Centrality Measures''.

# Question 10
- Class: cmd_question
  Output: >
    Now, use the "sort()" function to output a vector that starts
    with the family with highest betweenness and ends with the family with
    lowest betweenness.
  CorrectAnswer: sort(between, decreasing = TRUE)
  AnswerTests: omnitest(correctExpr = 'sort(between, decreasing = TRUE)')
  Hint: See ''Directed Graphs and Centrality''.

- Class: text
  Output: >
    The "sort()" and "order()" functions are closely related.
    Whereas "sort()" returns the ordered vector itself,
    "order()" returns the ordering index vector.

# Question 11
- Class: cmd_question
  Output: >
    Verify this by using "order()" and indexing to output the same vector
    from the previous question.
  CorrectAnswer: between[order(between, decreasing = TRUE)]
  AnswerTests: >-
    omnitest(correctExpr = 'between[order(between, decreasing = TRUE)]')
  Hint: See ''Directed Graphs and Centrality''.

# Question 12
- Class: mult_question
  Output: >
    Based on you find, which of the elite Florentine families was most central
    in the marriage network?
  AnswerChoices: 'Medici; Ridolfi; Bischeri; Strozzi; Pucci'
  CorrectAnswer: Medici
  AnswerTests: omnitest(correctVal = "Medici")
  Hint: See 'Undirected Graphs and Centrality Measures'.

- Class: text
  Output: >
    You've successfully completed part 2 of the Discovery course!

